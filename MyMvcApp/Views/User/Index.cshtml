@{
    ViewData["Title"] = "User";
}
<h1>@ViewData["Title"]</h1>
<p>
    <a asp-action="Create" class="btn btn-success">新規ユーザー登録</a>
    <button id="refreshBtn" class="btn btn-primary">一覧を更新</button>
</p>

<div id="loadingMessage" style="display: none;">
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">読み込み中...</span>
        </div>
        <p>ユーザー情報を読み込み中...</p>
    </div>
</div>

<div id="errorMessage" class="alert alert-danger" style="display: none;"></div>

<table class="table" id="userTable" style="display: none;">
    <thead>
        <tr>
            <th>ID</th>
            <th>UserName</th>
            <th>Email</th>
            <th>CreatedAt</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody id="userTableBody">
    </tbody>
</table>

<div id="noDataMessage" class="alert alert-info" style="display: none;">
    ユーザーが登録されていません。
</div>

<script>
    // ページ読み込み時にユーザー一覧を取得
    document.addEventListener('DOMContentLoaded', function() {
        loadUsers();

        // 更新ボタンのイベントリスナー
        document.getElementById('refreshBtn').addEventListener('click', function() {
            loadUsers();
        });
    });

    // ユーザー一覧を取得する関数
    async function loadUsers() {
        const loadingMessage = document.getElementById('loadingMessage');
        const errorMessage = document.getElementById('errorMessage');
        const userTable = document.getElementById('userTable');
        const userTableBody = document.getElementById('userTableBody');
        const noDataMessage = document.getElementById('noDataMessage');

        // ローディング表示
        loadingMessage.style.display = 'block';
        errorMessage.style.display = 'none';
        userTable.style.display = 'none';
        noDataMessage.style.display = 'none';

        try {
            const response = await fetch('/api/users', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const result = await response.json();

            if (result.success) {
                const users = result.data;

                if (users.length === 0) {
                    // データがない場合
                    noDataMessage.style.display = 'block';
                } else {
                    // テーブルにデータを表示
                    userTableBody.innerHTML = '';

                    users.forEach(user => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${user.id}</td>
                            <td>${escapeHtml(user.userName)}</td>
                            <td>${escapeHtml(user.email)}</td>
                            <td>${user.createdAt}</td>
                            <td>
                                <button class="btn btn-danger btn-sm" onclick="deleteUser(${user.id})">削除</button>
                            </td>
                        `;
                        userTableBody.appendChild(row);
                    });

                    userTable.style.display = 'table';
                }
            } else {
                // エラーメッセージを表示
                errorMessage.textContent = result.message || 'ユーザー一覧の取得に失敗しました';
                errorMessage.style.display = 'block';
            }
        } catch (error) {
            // ネットワークエラーなどの場合
            errorMessage.textContent = 'ネットワークエラーが発生しました: ' + error.message;
            errorMessage.style.display = 'block';
        } finally {
            // ローディング非表示
            loadingMessage.style.display = 'none';
        }
    }

    // ユーザーを削除する関数
    async function deleteUser(userId) {
        if (!confirm('本当にこのユーザーを削除しますか？')) {
            return;
        }

        try {
            const response = await fetch(`/api/users/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const result = await response.json();

            if (result.success) {
                alert('ユーザーが正常に削除されました');
                // 一覧を再読み込み
                loadUsers();
            } else {
                alert('削除に失敗しました: ' + result.message);
            }
        } catch (error) {
            alert('ネットワークエラーが発生しました: ' + error.message);
        }
    }

    // HTMLエスケープ関数
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
</script>
